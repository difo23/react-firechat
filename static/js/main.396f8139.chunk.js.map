{"version":3,"sources":["components/Button.js","config/firebase.js","components/Message.js","components/Channel.js","login/signInWithGoogle.js","login/signOut.js","hooks/useAuthState.js","App.js","reportWebVitals.js","index.js"],"names":["Button","onClick","children","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","googleAuthProvider","auth","GoogleAuthProvider","formatDate","date","formattedDate","formatRelative","Date","charAt","toUpperCase","slice","Message","createdAt","text","displayName","photoURL","src","alt","className","width","height","seconds","Channel","user","useState","messages","setMessages","useEffect","collection","orderBy","limit","onSnapshot","querySnapshot","data","docs","map","doc","id","uid","newMessage","setNewMessage","messagesRef","inputRef","useRef","current","focus","message","onSubmit","e","preventDefault","trimmedMessage","trim","add","FieldValue","serverTimestamp","ref","type","value","onChange","target","placeholder","disabled","signInWithGoogle","a","useDeviceLanguage","signInWithPopup","console","error","signOut","useAuthState","initializing","setInitializing","currentUser","setUser","onAuthStateChanged","App","renderLoading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.396f8139.chunk.js","sourcesContent":["const Button = ({\n    onClick = null,\n    children = null\n}) =>\n(\n    <button onClick={onClick} >{children} </button>\n);\n\nexport default Button;","// Firebase deps\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\n// Incializar firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAbEpwuQCPlRtWkc4QlXhmk6iVeX9mhOmI\",\n  authDomain: \"firechat-test-ce691.firebaseapp.com\",\n  projectId: \"firechat-test-ce691\",\n  storageBucket: \"firechat-test-ce691.appspot.com\",\n  messagingSenderId: \"769701094713\",\n  appId: \"1:769701094713:web:08e70a470d52dc4feef4e8\",\n  measurementId: \"G-TS96K1S04E\"\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\n// Tomo los elementos basicos para trabajar con firebase.\n\nconst db = firebase.firestore();\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n\n\nexport {\n  db,\n  googleAuthProvider,\n  firebase\n}","import { formatRelative } from 'date-fns';\n\nconst formatDate = date => {\n    let formattedDate = '';\n    if (date) {\n        // Convert the date in words relative to the current date\n        formattedDate = formatRelative(date, new Date());\n        // Uppercase the first letter\n        formattedDate =\n            formattedDate.charAt(0).toUpperCase() + formattedDate.slice(1);\n    }\n    return formattedDate;\n};\n\n\n// Message.js\nconst Message = ({\n    createdAt = null,\n    text = '',\n    displayName = '',\n    photoURL = '',\n}) => {\n    if (!text) return null;\n\n    return (\n        <div>\n            {photoURL ? (\n                <img\n                    src={photoURL}\n                    alt=\"Avatar\"\n                    className=\"rounded-full mr-4\"\n                    width={45}\n                    height={45}\n                />\n            ) : null}\n            {displayName ? <p>{displayName}</p> : null}\n            {createdAt?.seconds ? (\n                <span>{formatDate(new Date(createdAt.seconds * 1000))}</span>\n            ) : null}\n            <p>{text}</p>\n        </div>\n    );;\n};\n\nexport default Message;","\n\nimport { useEffect, useState, useRef } from 'react';\nimport { db, firebase } from '../config/firebase';\nimport Message from './Message';\n\n\nconst Channel = ({ user = null }) => {\n    const [messages, setMessages] = useState([]);\n\n    //Necesito cargar los mensajes desde la BD.\n    useEffect(() => {\n        /* \n            Crear el query de los mensajes.\n            Cargar 100 mensajes ordenados por fecha.\n        */\n        const query = db.collection('messages')\n            .orderBy('createdAt')\n            .limit(100);\n\n        const unsubscribe = query.onSnapshot(querySnapshot => {\n            //Obtiene todos los mensajes desde la bd con su ID.\n            const data = querySnapshot.docs.map(doc => ({\n                ...doc.data(),\n                id: doc.id,\n            }));\n            // Actualizo los mensjaes obtenidos desde la bd. \n            setMessages(data);\n\n        });\n        //CleanUp\n        return unsubscribe;\n\n    }, [])\n\n\n    //Codigo para agregar nuevos mensajes\n    const { uid, displayName, photoURL } = user;\n    const [newMessage, setNewMessage] = useState('');\n\n    const handleMessageOnChange = (e) => {\n        e.preventDefault();\n        setNewMessage(e.target.value);\n    }\n\n\n    const messagesRef = db.collection('messages');\n\n\n    const handleOnSubmit = e => {\n        e.preventDefault();\n\n        const trimmedMessage = newMessage.trim();\n        if (trimmedMessage) {\n            // Add new message in Firestore\n            messagesRef.add({\n                text: trimmedMessage,\n                createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n                uid,\n                displayName,\n                photoURL,\n            });\n            // Clear input field\n            setNewMessage('');\n        }\n    };\n\n    const inputRef = useRef();\n    useEffect(() => {\n        if (inputRef.current) {\n            inputRef.current.focus();\n        }\n    }, [inputRef]);\n\n\n    return (\n        <>\n            <ul>\n                {messages.map(message => (\n                    <li key={message.id}>\n                        <Message {...message} />\n                    </li>\n                ))}\n            </ul>\n\n            <form\n                onSubmit={handleOnSubmit}>\n                <input\n                    ref={inputRef}\n                    type=\"text\"\n                    value={newMessage}\n                    onChange={handleMessageOnChange}\n                    placeholder=\"Escribe tu mensaje aqui...\"\n                />\n                <button\n                    type=\"submit\"\n                    disabled={!newMessage}\n                >\n                    Send\n        </button>\n            </form>\n        </>\n    );\n};\n\nexport default Channel;","\nimport {\n    googleAuthProvider,\n    firebase\n} from '../config/firebase';\n\n\nconst signInWithGoogle = async () => {\n\n    // Coloca el lenguje de preferencia del dispositivo\n    firebase.auth().useDeviceLanguage();\n\n    // Incio el proceso de login dentro de un try ... catch\n\n    try {\n        await firebase.auth().signInWithPopup(googleAuthProvider);\n\n    } catch (e) {\n        console.error(e.message);\n    }\n\n};\n\n\nexport default signInWithGoogle;","import {\n    firebase\n} from '../config/firebase';\n\n\nconst signOut = async () => {\n    try {\n        await firebase.auth().signOut();\n    } catch (e) {\n        console.error(e);\n    }\n\n};\n\n\nexport default signOut;\n","\nimport {useState, useEffect} from 'react';\n\nfunction useAuthState(auth) {\n    const [initializing, setInitializing] = useState(true);\n    const [user, setUser] = useState(() => auth.currentUser);\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                setUser(user);\n            } else {\n                setUser(false);\n            }\n            if (initializing) {\n                setInitializing(false);\n            }\n        });\n\n        // Cleanup subscription\n        return unsubscribe;\n    }, [auth, initializing]);\n\n    return { user, initializing };\n}\n\n\nexport default useAuthState;","\nimport { Button, Channel } from './components';\nimport { signInWithGoogle, signOut } from './login';\nimport { useAuthState } from './hooks';\nimport { firebase } from './config/firebase';\n\n\nfunction App() {\n  //Entegracion del hook useAuthState\n  const { user, initializing } = useAuthState(firebase.auth());\n  // Renderezar en funcion de la exitencia de un usuario con operador ternario.\n\n\n  const renderLoading = () => {\n    if (initializing) {\n      return <div>\n        <h1>Loading ...</h1>\n      </div>\n    }\n  }\n  return (\n    <div>\n      { renderLoading()}\n      {\n        user ? (\n          <>\n            <Button onClick={signOut} > Logout Google</Button>\n            <p> Bienvenidos al CHAT!</p>\n            <Channel user={user} />\n          </>\n        ) : <Button onClick={signInWithGoogle} > Sign in with Google</Button>\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}